// https://ru.reactjs.org/docs/components-and-props.html


import React from 'react';
import '../styles.scss';
import ReactDOM from 'react-dom/client';


// Компоненты React это независимые части интерфейса, которые работают как функции - принимают на вход пропсы и возвращают элементы, которые можно рендернуть.


// Компоненты можно описать двумя способами - функциональным и классовым, они эквиваленты (классовым проще записывать большие компоненты).
// Название компонента всегда пишется с большой буквы
function WelcomeF (props) {
  return <h1>Hello, {props.name}</h1>;
}

class WelcomeC extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}
// При передаче пропсов в классовый компонент НЕОБХОДИМО создать `constructor`, вызывающий `super`


// Сила компонентов в том, что их можно вызывать как DOM эл-ты (тегами).
const element1 = <WelcomeF name='Алиса' />;
// Когда React видит подобную запись - создается объект `props`, который собирает все атрибуты(name) и содержание и передает их в компонент(WelcomeC).

// const Componentsandprops = ReactDOM.createRoot(document.getElementById('root'));
// Componentsandprops.render(element1);


// Компоненты НИКОГДА не должны изменять свои входные данные(пропсы) напрямую. Они сначала копируют их, потом возвращают новый результат.


// P.S: Не ленитесь, дробите сложные компоненты на несколько простых, особенно если они повторяются.
// P.P.S: У компонентов должен быть жизненный цикл, а то в большом количестве они нагрузят систему.